
DotMatrixScrollingText.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000258  00800100  00000570  00000604  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000570  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002c0  00800358  00800358  0000085c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000085c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000088c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  000008c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011fc  00000000  00000000  00000998  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c0a  00000000  00000000  00001b94  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000854  00000000  00000000  0000279e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000238  00000000  00000000  00002ff4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005af  00000000  00000000  0000322c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000692  00000000  00000000  000037db  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000190  00000000  00000000  00003e6d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	13 e0       	ldi	r17, 0x03	; 3
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e7       	ldi	r30, 0x70	; 112
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 35       	cpi	r26, 0x58	; 88
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	26 e0       	ldi	r18, 0x06	; 6
  b4:	a8 e5       	ldi	r26, 0x58	; 88
  b6:	b3 e0       	ldi	r27, 0x03	; 3
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a8 31       	cpi	r26, 0x18	; 24
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	41 d2       	rcall	.+1154   	; 0x546 <main>
  c4:	53 c2       	rjmp	.+1190   	; 0x56c <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <look_up_character>:
		}
	}
};


character look_up_character(char c){
  c8:	ac 01       	movw	r20, r24
	for(int i = 0; i < 29; i++)
	{
		if(dictionary[i].letter == c)
  ca:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  ce:	68 17       	cp	r22, r24
  d0:	61 f0       	breq	.+24     	; 0xea <look_up_character+0x22>
		{
			return dictionary[i];
		}
		if (c == 60)
  d2:	6c 33       	cpi	r22, 0x3C	; 60
  d4:	d1 f0       	breq	.+52     	; 0x10a <look_up_character+0x42>
		{
			return dictionary[28];
		}
		if(c == 62)
  d6:	6e 33       	cpi	r22, 0x3E	; 62
  d8:	09 f1       	breq	.+66     	; 0x11c <look_up_character+0x54>
  da:	e3 e1       	ldi	r30, 0x13	; 19
  dc:	f1 e0       	ldi	r31, 0x01	; 1
	}
};


character look_up_character(char c){
	for(int i = 0; i < 29; i++)
  de:	21 e0       	ldi	r18, 0x01	; 1
  e0:	30 e0       	ldi	r19, 0x00	; 0
	{
		if(dictionary[i].letter == c)
  e2:	90 81       	ld	r25, Z
  e4:	96 13       	cpse	r25, r22
  e6:	23 c0       	rjmp	.+70     	; 0x12e <look_up_character+0x66>
  e8:	02 c0       	rjmp	.+4      	; 0xee <look_up_character+0x26>
	}
};


character look_up_character(char c){
	for(int i = 0; i < 29; i++)
  ea:	20 e0       	ldi	r18, 0x00	; 0
  ec:	30 e0       	ldi	r19, 0x00	; 0
	{
		if(dictionary[i].letter == c)
		{
			return dictionary[i];
  ee:	83 e1       	ldi	r24, 0x13	; 19
  f0:	82 9f       	mul	r24, r18
  f2:	f0 01       	movw	r30, r0
  f4:	83 9f       	mul	r24, r19
  f6:	f0 0d       	add	r31, r0
  f8:	11 24       	eor	r1, r1
  fa:	e0 50       	subi	r30, 0x00	; 0
  fc:	ff 4f       	sbci	r31, 0xFF	; 255
  fe:	da 01       	movw	r26, r20
 100:	01 90       	ld	r0, Z+
 102:	0d 92       	st	X+, r0
 104:	8a 95       	dec	r24
 106:	e1 f7       	brne	.-8      	; 0x100 <look_up_character+0x38>
 108:	20 c0       	rjmp	.+64     	; 0x14a <look_up_character+0x82>
		}
		if (c == 60)
		{
			return dictionary[28];
 10a:	83 e1       	ldi	r24, 0x13	; 19
 10c:	e4 e1       	ldi	r30, 0x14	; 20
 10e:	f3 e0       	ldi	r31, 0x03	; 3
 110:	da 01       	movw	r26, r20
 112:	01 90       	ld	r0, Z+
 114:	0d 92       	st	X+, r0
 116:	8a 95       	dec	r24
 118:	e1 f7       	brne	.-8      	; 0x112 <look_up_character+0x4a>
 11a:	17 c0       	rjmp	.+46     	; 0x14a <look_up_character+0x82>
		}
		if(c == 62)
		{
			return dictionary[29];
 11c:	83 e1       	ldi	r24, 0x13	; 19
 11e:	e7 e2       	ldi	r30, 0x27	; 39
 120:	f3 e0       	ldi	r31, 0x03	; 3
 122:	da 01       	movw	r26, r20
 124:	01 90       	ld	r0, Z+
 126:	0d 92       	st	X+, r0
 128:	8a 95       	dec	r24
 12a:	e1 f7       	brne	.-8      	; 0x124 <look_up_character+0x5c>
 12c:	0e c0       	rjmp	.+28     	; 0x14a <look_up_character+0x82>
	}
};


character look_up_character(char c){
	for(int i = 0; i < 29; i++)
 12e:	2f 5f       	subi	r18, 0xFF	; 255
 130:	3f 4f       	sbci	r19, 0xFF	; 255
 132:	73 96       	adiw	r30, 0x13	; 19
 134:	2d 31       	cpi	r18, 0x1D	; 29
 136:	31 05       	cpc	r19, r1
 138:	a1 f6       	brne	.-88     	; 0xe2 <look_up_character+0x1a>
		{
			return dictionary[29];
		}
	}
	
	return dictionary[0];
 13a:	83 e1       	ldi	r24, 0x13	; 19
 13c:	e0 e0       	ldi	r30, 0x00	; 0
 13e:	f1 e0       	ldi	r31, 0x01	; 1
 140:	da 01       	movw	r26, r20
 142:	01 90       	ld	r0, Z+
 144:	0d 92       	st	X+, r0
 146:	8a 95       	dec	r24
 148:	e1 f7       	brne	.-8      	; 0x142 <look_up_character+0x7a>
 14a:	ca 01       	movw	r24, r20
 14c:	08 95       	ret

0000014e <start_led_matrix>:

#include "led_matrix_driver.h"

void start_led_matrix(void)
{
	TWCR = (0x80 | 0x20 | 0x04);
 14e:	84 ea       	ldi	r24, 0xA4	; 164
 150:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while( 0x00 == (TWCR & 0x80) );
 154:	e4 e7       	ldi	r30, 0x74	; 116
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	80 81       	ld	r24, Z
 15a:	88 23       	and	r24, r24
 15c:	ec f7       	brge	.-6      	; 0x158 <start_led_matrix+0xa>
}
 15e:	08 95       	ret

00000160 <stop_led_matrix>:

void stop_led_matrix(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
 160:	84 e9       	ldi	r24, 0x94	; 148
 162:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 166:	08 95       	ret

00000168 <write_led_matrix>:
}

void write_led_matrix(unsigned char data)
{
	TWDR = data;
 168:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
	TWCR = (0x80 | 0x04);
 16c:	84 e8       	ldi	r24, 0x84	; 132
 16e:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while (0 == (TWCR & 0x80));
 172:	e4 e7       	ldi	r30, 0x74	; 116
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	80 81       	ld	r24, Z
 178:	88 23       	and	r24, r24
 17a:	ec f7       	brge	.-6      	; 0x176 <write_led_matrix+0xe>
}
 17c:	08 95       	ret

0000017e <init_led_matrix>:

void init_led_matrix(void)
{
 17e:	af 92       	push	r10
 180:	bf 92       	push	r11
 182:	cf 92       	push	r12
 184:	df 92       	push	r13
 186:	ef 92       	push	r14
 188:	ff 92       	push	r15
 18a:	0f 93       	push	r16
 18c:	1f 93       	push	r17
 18e:	cf 93       	push	r28
 190:	df 93       	push	r29
 192:	00 d0       	rcall	.+0      	; 0x194 <init_led_matrix+0x16>
 194:	00 d0       	rcall	.+0      	; 0x196 <init_led_matrix+0x18>
 196:	00 d0       	rcall	.+0      	; 0x198 <init_led_matrix+0x1a>
 198:	cd b7       	in	r28, 0x3d	; 61
 19a:	de b7       	in	r29, 0x3e	; 62
	TWSR = 0;
 19c:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
	TWBR = 32;	 // TWI clock set to 100kHz, prescaler = 0
 1a0:	80 e2       	ldi	r24, 0x20	; 32
 1a2:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
	
	int ints[] = { 0, 2, 8 };
 1a6:	86 e0       	ldi	r24, 0x06	; 6
 1a8:	ec e3       	ldi	r30, 0x3C	; 60
 1aa:	f3 e0       	ldi	r31, 0x03	; 3
 1ac:	de 01       	movw	r26, r28
 1ae:	11 96       	adiw	r26, 0x01	; 1
 1b0:	01 90       	ld	r0, Z+
 1b2:	0d 92       	st	X+, r0
 1b4:	8a 95       	dec	r24
 1b6:	e1 f7       	brne	.-8      	; 0x1b0 <init_led_matrix+0x32>
 1b8:	ce 01       	movw	r24, r28
 1ba:	01 96       	adiw	r24, 0x01	; 1
 1bc:	7c 01       	movw	r14, r24
 1be:	5e 01       	movw	r10, r28
 1c0:	97 e0       	ldi	r25, 0x07	; 7
 1c2:	a9 0e       	add	r10, r25
 1c4:	b1 1c       	adc	r11, r1
	while( 0x00 == (TWCR & 0x80) );
}

void stop_led_matrix(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
 1c6:	0f 2e       	mov	r0, r31
 1c8:	f4 e7       	ldi	r31, 0x74	; 116
 1ca:	cf 2e       	mov	r12, r31
 1cc:	d1 2c       	mov	r13, r1
 1ce:	f0 2d       	mov	r31, r0
 1d0:	04 e9       	ldi	r16, 0x94	; 148
	TWBR = 32;	 // TWI clock set to 100kHz, prescaler = 0
	
	int ints[] = { 0, 2, 8 };
	for (int i = 0; i < 3; i++)
	{
		start_led_matrix();
 1d2:	bd df       	rcall	.-134    	; 0x14e <start_led_matrix>
		write_led_matrix(DOT_MATRIX_BASE_ADDR + ints[i]);	// Display I2C addres + R/W bit
 1d4:	f7 01       	movw	r30, r14
 1d6:	10 81       	ld	r17, Z
 1d8:	f2 e0       	ldi	r31, 0x02	; 2
 1da:	ef 0e       	add	r14, r31
 1dc:	f1 1c       	adc	r15, r1
 1de:	10 52       	subi	r17, 0x20	; 32
 1e0:	81 2f       	mov	r24, r17
 1e2:	c2 df       	rcall	.-124    	; 0x168 <write_led_matrix>
		write_led_matrix(0x21);	// Internal osc on (page 10 HT16K33)
 1e4:	81 e2       	ldi	r24, 0x21	; 33
 1e6:	c0 df       	rcall	.-128    	; 0x168 <write_led_matrix>
	while( 0x00 == (TWCR & 0x80) );
}

void stop_led_matrix(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
 1e8:	f6 01       	movw	r30, r12
		start_led_matrix();
		write_led_matrix(DOT_MATRIX_BASE_ADDR + ints[i]);	// Display I2C addres + R/W bit
		write_led_matrix(0x21);	// Internal osc on (page 10 HT16K33)
		stop_led_matrix();
		
		start_led_matrix();
 1ea:	00 83       	st	Z, r16
		write_led_matrix(DOT_MATRIX_BASE_ADDR + ints[i]);	// Display I2C address + R/W bit
 1ec:	b0 df       	rcall	.-160    	; 0x14e <start_led_matrix>
 1ee:	81 2f       	mov	r24, r17
		write_led_matrix(0xA0);	// HT16K33 pins all output
 1f0:	bb df       	rcall	.-138    	; 0x168 <write_led_matrix>
 1f2:	80 ea       	ldi	r24, 0xA0	; 160
	while( 0x00 == (TWCR & 0x80) );
}

void stop_led_matrix(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
 1f4:	b9 df       	rcall	.-142    	; 0x168 <write_led_matrix>
		start_led_matrix();
		write_led_matrix(DOT_MATRIX_BASE_ADDR + ints[i]);	// Display I2C address + R/W bit
		write_led_matrix(0xA0);	// HT16K33 pins all output
		stop_led_matrix();
		
		start_led_matrix();
 1f6:	f6 01       	movw	r30, r12
		write_led_matrix(DOT_MATRIX_BASE_ADDR + ints[i]);	// Display I2C address + R/W bit
 1f8:	00 83       	st	Z, r16
 1fa:	a9 df       	rcall	.-174    	; 0x14e <start_led_matrix>
		write_led_matrix(0xE7);	// Display Dimming 8/16 duty cycle
 1fc:	81 2f       	mov	r24, r17
 1fe:	b4 df       	rcall	.-152    	; 0x168 <write_led_matrix>
	while( 0x00 == (TWCR & 0x80) );
}

void stop_led_matrix(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
 200:	87 ee       	ldi	r24, 0xE7	; 231
 202:	b2 df       	rcall	.-156    	; 0x168 <write_led_matrix>
		start_led_matrix();
		write_led_matrix(DOT_MATRIX_BASE_ADDR + ints[i]);	// Display I2C address + R/W bit
		write_led_matrix(0xE7);	// Display Dimming 8/16 duty cycle
		stop_led_matrix();
		
		start_led_matrix();
 204:	f6 01       	movw	r30, r12
 206:	00 83       	st	Z, r16
		write_led_matrix(DOT_MATRIX_BASE_ADDR + ints[i]);	// Display I2C address + R/W bit
 208:	a2 df       	rcall	.-188    	; 0x14e <start_led_matrix>
 20a:	81 2f       	mov	r24, r17
 20c:	ad df       	rcall	.-166    	; 0x168 <write_led_matrix>
		write_led_matrix(0x81);	// Blink OFF - Display On
 20e:	81 e8       	ldi	r24, 0x81	; 129
 210:	ab df       	rcall	.-170    	; 0x168 <write_led_matrix>
 212:	f6 01       	movw	r30, r12
	while( 0x00 == (TWCR & 0x80) );
}

void stop_led_matrix(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
 214:	00 83       	st	Z, r16
 216:	ea 14       	cp	r14, r10
{
	TWSR = 0;
	TWBR = 32;	 // TWI clock set to 100kHz, prescaler = 0
	
	int ints[] = { 0, 2, 8 };
	for (int i = 0; i < 3; i++)
 218:	fb 04       	cpc	r15, r11
 21a:	d9 f6       	brne	.-74     	; 0x1d2 <init_led_matrix+0x54>
 21c:	26 96       	adiw	r28, 0x06	; 6
		start_led_matrix();
		write_led_matrix(DOT_MATRIX_BASE_ADDR + ints[i]);	// Display I2C address + R/W bit
		write_led_matrix(0x81);	// Blink OFF - Display On
		stop_led_matrix();
	}
}
 21e:	0f b6       	in	r0, 0x3f	; 63
 220:	f8 94       	cli
 222:	de bf       	out	0x3e, r29	; 62
 224:	0f be       	out	0x3f, r0	; 63
 226:	cd bf       	out	0x3d, r28	; 61
 228:	df 91       	pop	r29
 22a:	cf 91       	pop	r28
 22c:	1f 91       	pop	r17
 22e:	0f 91       	pop	r16
 230:	ff 90       	pop	r15
 232:	ef 90       	pop	r14
 234:	df 90       	pop	r13
 236:	cf 90       	pop	r12
 238:	bf 90       	pop	r11
 23a:	af 90       	pop	r10
 23c:	08 95       	ret

0000023e <clear_led_matrix_display>:
 23e:	af 92       	push	r10

void clear_led_matrix_display(void)
{
 240:	bf 92       	push	r11
 242:	cf 92       	push	r12
 244:	df 92       	push	r13
 246:	ef 92       	push	r14
 248:	ff 92       	push	r15
 24a:	0f 93       	push	r16
 24c:	1f 93       	push	r17
 24e:	cf 93       	push	r28
 250:	df 93       	push	r29
 252:	00 d0       	rcall	.+0      	; 0x254 <clear_led_matrix_display+0x16>
 254:	00 d0       	rcall	.+0      	; 0x256 <clear_led_matrix_display+0x18>
 256:	00 d0       	rcall	.+0      	; 0x258 <clear_led_matrix_display+0x1a>
 258:	cd b7       	in	r28, 0x3d	; 61
 25a:	de b7       	in	r29, 0x3e	; 62
	int ints[] = { 0, 2, 8 };
 25c:	86 e0       	ldi	r24, 0x06	; 6
 25e:	ec e3       	ldi	r30, 0x3C	; 60
 260:	f3 e0       	ldi	r31, 0x03	; 3
 262:	de 01       	movw	r26, r28
 264:	11 96       	adiw	r26, 0x01	; 1
 266:	01 90       	ld	r0, Z+
 268:	0d 92       	st	X+, r0
 26a:	8a 95       	dec	r24
 26c:	e1 f7       	brne	.-8      	; 0x266 <clear_led_matrix_display+0x28>
 26e:	ce 01       	movw	r24, r28
 270:	01 96       	adiw	r24, 0x01	; 1
 272:	7c 01       	movw	r14, r24
 274:	5e 01       	movw	r10, r28
 276:	97 e0       	ldi	r25, 0x07	; 7
 278:	a9 0e       	add	r10, r25
 27a:	b1 1c       	adc	r11, r1
	while( 0x00 == (TWCR & 0x80) );
}

void stop_led_matrix(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
 27c:	0f 2e       	mov	r0, r31
 27e:	f4 e7       	ldi	r31, 0x74	; 116
 280:	cf 2e       	mov	r12, r31
 282:	d1 2c       	mov	r13, r1
 284:	f0 2d       	mov	r31, r0
 286:	04 e9       	ldi	r16, 0x94	; 148
 288:	14 c0       	rjmp	.+40     	; 0x2b2 <clear_led_matrix_display+0x74>
	int ints[] = { 0, 2, 8 };

	for(int i = 0; i < 3;i++){
		for (int j = 0; j < 8; j++)
		{
			start_led_matrix();
 28a:	61 df       	rcall	.-318    	; 0x14e <start_led_matrix>
			write_led_matrix(DOT_MATRIX_BASE_ADDR + ints[i]);	// Display I2C addres + R/W bit
 28c:	f7 01       	movw	r30, r14
 28e:	80 81       	ld	r24, Z
 290:	80 52       	subi	r24, 0x20	; 32
 292:	6a df       	rcall	.-300    	; 0x168 <write_led_matrix>
			write_led_matrix(0x00 + (j * 2));	//Select row on matrix
 294:	81 2f       	mov	r24, r17
 296:	68 df       	rcall	.-304    	; 0x168 <write_led_matrix>
			write_led_matrix(0x00);	// wtrit data to matrix
 298:	80 e0       	ldi	r24, 0x00	; 0
 29a:	66 df       	rcall	.-308    	; 0x168 <write_led_matrix>
 29c:	f6 01       	movw	r30, r12
	while( 0x00 == (TWCR & 0x80) );
}

void stop_led_matrix(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
 29e:	00 83       	st	Z, r16
 2a0:	1e 5f       	subi	r17, 0xFE	; 254
 2a2:	10 31       	cpi	r17, 0x10	; 16
void clear_led_matrix_display(void)
{
	int ints[] = { 0, 2, 8 };

	for(int i = 0; i < 3;i++){
		for (int j = 0; j < 8; j++)
 2a4:	91 f7       	brne	.-28     	; 0x28a <clear_led_matrix_display+0x4c>
 2a6:	f2 e0       	ldi	r31, 0x02	; 2
 2a8:	ef 0e       	add	r14, r31
 2aa:	f1 1c       	adc	r15, r1
 2ac:	ae 14       	cp	r10, r14

void clear_led_matrix_display(void)
{
	int ints[] = { 0, 2, 8 };

	for(int i = 0; i < 3;i++){
 2ae:	bf 04       	cpc	r11, r15
 2b0:	11 f0       	breq	.+4      	; 0x2b6 <clear_led_matrix_display+0x78>
 2b2:	10 e0       	ldi	r17, 0x00	; 0
		stop_led_matrix();
	}
}

void clear_led_matrix_display(void)
{
 2b4:	ea cf       	rjmp	.-44     	; 0x28a <clear_led_matrix_display+0x4c>
 2b6:	26 96       	adiw	r28, 0x06	; 6
			write_led_matrix(0x00 + (j * 2));	//Select row on matrix
			write_led_matrix(0x00);	// wtrit data to matrix
			stop_led_matrix();
		}
	}
}
 2b8:	0f b6       	in	r0, 0x3f	; 63
 2ba:	f8 94       	cli
 2bc:	de bf       	out	0x3e, r29	; 62
 2be:	0f be       	out	0x3f, r0	; 63
 2c0:	cd bf       	out	0x3d, r28	; 61
 2c2:	df 91       	pop	r29
 2c4:	cf 91       	pop	r28
 2c6:	1f 91       	pop	r17
 2c8:	0f 91       	pop	r16
 2ca:	ff 90       	pop	r15
 2cc:	ef 90       	pop	r14
 2ce:	df 90       	pop	r13
 2d0:	cf 90       	pop	r12
 2d2:	bf 90       	pop	r11
 2d4:	af 90       	pop	r10
 2d6:	08 95       	ret

000002d8 <selectLetters>:
 2d8:	cf 92       	push	r12

void clearDotmatrixBuffer(void)
{
	for (int i = 0; i < 300; i++)
	buffer[i] = 0;
}
 2da:	df 92       	push	r13
 2dc:	ef 92       	push	r14
 2de:	ff 92       	push	r15
 2e0:	0f 93       	push	r16
 2e2:	1f 93       	push	r17
 2e4:	cf 93       	push	r28
 2e6:	df 93       	push	r29
 2e8:	cd b7       	in	r28, 0x3d	; 61
 2ea:	de b7       	in	r29, 0x3e	; 62
 2ec:	63 97       	sbiw	r28, 0x13	; 19
 2ee:	0f b6       	in	r0, 0x3f	; 63
 2f0:	f8 94       	cli
 2f2:	de bf       	out	0x3e, r29	; 62
 2f4:	0f be       	out	0x3f, r0	; 63
 2f6:	cd bf       	out	0x3d, r28	; 61
 2f8:	7c 01       	movw	r14, r24
 2fa:	6c 01       	movw	r12, r24
 2fc:	00 e0       	ldi	r16, 0x00	; 0
 2fe:	10 e0       	ldi	r17, 0x00	; 0
 300:	69 c0       	rjmp	.+210    	; 0x3d4 <selectLetters+0xfc>
 302:	f6 01       	movw	r30, r12
 304:	61 91       	ld	r22, Z+
 306:	6f 01       	movw	r12, r30
 308:	ce 01       	movw	r24, r28
 30a:	01 96       	adiw	r24, 0x01	; 1
 30c:	dd de       	rcall	.-582    	; 0xc8 <look_up_character>
 30e:	89 81       	ldd	r24, Y+1	; 0x01
 310:	80 32       	cpi	r24, 0x20	; 32
 312:	c9 f1       	breq	.+114    	; 0x386 <selectLetters+0xae>
 314:	4a 81       	ldd	r20, Y+2	; 0x02
 316:	5b 81       	ldd	r21, Y+3	; 0x03
 318:	14 16       	cp	r1, r20
 31a:	15 06       	cpc	r1, r21
 31c:	1c f5       	brge	.+70     	; 0x364 <selectLetters+0x8c>
 31e:	fe 01       	movw	r30, r28
 320:	34 96       	adiw	r30, 0x04	; 4
 322:	60 91 58 03 	lds	r22, 0x0358	; 0x800358 <__data_end>
 326:	70 91 59 03 	lds	r23, 0x0359	; 0x800359 <__data_end+0x1>
 32a:	db 01       	movw	r26, r22
 32c:	aa 0f       	add	r26, r26
 32e:	bb 1f       	adc	r27, r27
 330:	a4 5a       	subi	r26, 0xA4	; 164
 332:	bc 4f       	sbci	r27, 0xFC	; 252
 334:	9a 01       	movw	r18, r20
 336:	22 0f       	add	r18, r18
 338:	33 1f       	adc	r19, r19
 33a:	2d 5f       	subi	r18, 0xFD	; 253
 33c:	3f 4f       	sbci	r19, 0xFF	; 255
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	8c 0f       	add	r24, r28
 344:	9d 1f       	adc	r25, r29
 346:	28 0f       	add	r18, r24
 348:	39 1f       	adc	r19, r25
 34a:	81 91       	ld	r24, Z+
 34c:	91 91       	ld	r25, Z+
 34e:	8d 93       	st	X+, r24
 350:	9d 93       	st	X+, r25
 352:	e2 17       	cp	r30, r18
 354:	f3 07       	cpc	r31, r19
 356:	c9 f7       	brne	.-14     	; 0x34a <selectLetters+0x72>
 358:	46 0f       	add	r20, r22
 35a:	57 1f       	adc	r21, r23
 35c:	50 93 59 03 	sts	0x0359, r21	; 0x800359 <__data_end+0x1>
 360:	40 93 58 03 	sts	0x0358, r20	; 0x800358 <__data_end>
 364:	80 91 58 03 	lds	r24, 0x0358	; 0x800358 <__data_end>
 368:	90 91 59 03 	lds	r25, 0x0359	; 0x800359 <__data_end+0x1>
 36c:	fc 01       	movw	r30, r24
 36e:	ee 0f       	add	r30, r30
 370:	ff 1f       	adc	r31, r31
 372:	e4 5a       	subi	r30, 0xA4	; 164
 374:	fc 4f       	sbci	r31, 0xFC	; 252
 376:	11 82       	std	Z+1, r1	; 0x01
 378:	10 82       	st	Z, r1
 37a:	01 96       	adiw	r24, 0x01	; 1
 37c:	90 93 59 03 	sts	0x0359, r25	; 0x800359 <__data_end+0x1>
 380:	80 93 58 03 	sts	0x0358, r24	; 0x800358 <__data_end>
 384:	25 c0       	rjmp	.+74     	; 0x3d0 <selectLetters+0xf8>
 386:	80 91 58 03 	lds	r24, 0x0358	; 0x800358 <__data_end>
 38a:	90 91 59 03 	lds	r25, 0x0359	; 0x800359 <__data_end+0x1>
 38e:	fc 01       	movw	r30, r24
 390:	ee 0f       	add	r30, r30
 392:	ff 1f       	adc	r31, r31
 394:	e4 5a       	subi	r30, 0xA4	; 164
 396:	fc 4f       	sbci	r31, 0xFC	; 252
 398:	11 82       	std	Z+1, r1	; 0x01
 39a:	10 82       	st	Z, r1
 39c:	fc 01       	movw	r30, r24
 39e:	ee 0f       	add	r30, r30
 3a0:	ff 1f       	adc	r31, r31
 3a2:	e2 5a       	subi	r30, 0xA2	; 162
 3a4:	fc 4f       	sbci	r31, 0xFC	; 252
 3a6:	11 82       	std	Z+1, r1	; 0x01
 3a8:	10 82       	st	Z, r1
 3aa:	fc 01       	movw	r30, r24
 3ac:	ee 0f       	add	r30, r30
 3ae:	ff 1f       	adc	r31, r31
 3b0:	e0 5a       	subi	r30, 0xA0	; 160
 3b2:	fc 4f       	sbci	r31, 0xFC	; 252
 3b4:	11 82       	std	Z+1, r1	; 0x01
 3b6:	10 82       	st	Z, r1
 3b8:	fc 01       	movw	r30, r24
 3ba:	ee 0f       	add	r30, r30
 3bc:	ff 1f       	adc	r31, r31
 3be:	ee 59       	subi	r30, 0x9E	; 158
 3c0:	fc 4f       	sbci	r31, 0xFC	; 252
 3c2:	11 82       	std	Z+1, r1	; 0x01
 3c4:	10 82       	st	Z, r1
 3c6:	04 96       	adiw	r24, 0x04	; 4
 3c8:	90 93 59 03 	sts	0x0359, r25	; 0x800359 <__data_end+0x1>
 3cc:	80 93 58 03 	sts	0x0358, r24	; 0x800358 <__data_end>
 3d0:	0f 5f       	subi	r16, 0xFF	; 255
 3d2:	1f 4f       	sbci	r17, 0xFF	; 255
 3d4:	f7 01       	movw	r30, r14
 3d6:	01 90       	ld	r0, Z+
 3d8:	00 20       	and	r0, r0
 3da:	e9 f7       	brne	.-6      	; 0x3d6 <selectLetters+0xfe>
 3dc:	31 97       	sbiw	r30, 0x01	; 1
 3de:	ee 19       	sub	r30, r14
 3e0:	ff 09       	sbc	r31, r15
 3e2:	0e 17       	cp	r16, r30
 3e4:	1f 07       	cpc	r17, r31
 3e6:	08 f4       	brcc	.+2      	; 0x3ea <selectLetters+0x112>
 3e8:	8c cf       	rjmp	.-232    	; 0x302 <selectLetters+0x2a>
 3ea:	80 91 58 03 	lds	r24, 0x0358	; 0x800358 <__data_end>
 3ee:	90 91 59 03 	lds	r25, 0x0359	; 0x800359 <__data_end+0x1>
 3f2:	47 96       	adiw	r24, 0x17	; 23
 3f4:	90 93 5b 03 	sts	0x035B, r25	; 0x80035b <updateCount+0x1>
 3f8:	80 93 5a 03 	sts	0x035A, r24	; 0x80035a <updateCount>
 3fc:	63 96       	adiw	r28, 0x13	; 19
 3fe:	0f b6       	in	r0, 0x3f	; 63
 400:	f8 94       	cli
 402:	de bf       	out	0x3e, r29	; 62
 404:	0f be       	out	0x3f, r0	; 63
 406:	cd bf       	out	0x3d, r28	; 61
 408:	df 91       	pop	r29
 40a:	cf 91       	pop	r28
 40c:	1f 91       	pop	r17
 40e:	0f 91       	pop	r16
 410:	ff 90       	pop	r15
 412:	ef 90       	pop	r14
 414:	df 90       	pop	r13
 416:	cf 90       	pop	r12
 418:	08 95       	ret

0000041a <scrollLeft>:
 41a:	af 92       	push	r10
 41c:	bf 92       	push	r11
 41e:	cf 92       	push	r12
 420:	df 92       	push	r13
 422:	ef 92       	push	r14
 424:	ff 92       	push	r15
 426:	0f 93       	push	r16
 428:	1f 93       	push	r17
 42a:	cf 93       	push	r28
 42c:	df 93       	push	r29
 42e:	e1 2c       	mov	r14, r1
 430:	f1 2c       	mov	r15, r1
 432:	c1 2c       	mov	r12, r1
 434:	d1 2c       	mov	r13, r1
 436:	0f 2e       	mov	r0, r31
 438:	fb e2       	ldi	r31, 0x2B	; 43
 43a:	af 2e       	mov	r10, r31
 43c:	f0 2d       	mov	r31, r0
 43e:	bb 24       	eor	r11, r11
 440:	b3 94       	inc	r11
 442:	85 de       	rcall	.-758    	; 0x14e <start_led_matrix>
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	e8 16       	cp	r14, r24
 448:	f1 04       	cpc	r15, r1
 44a:	59 f0       	breq	.+22     	; 0x462 <scrollLeft+0x48>
 44c:	82 e0       	ldi	r24, 0x02	; 2
 44e:	e8 16       	cp	r14, r24
 450:	f1 04       	cpc	r15, r1
 452:	59 f0       	breq	.+22     	; 0x46a <scrollLeft+0x50>
 454:	e1 14       	cp	r14, r1
 456:	f1 04       	cpc	r15, r1
 458:	59 f4       	brne	.+22     	; 0x470 <scrollLeft+0x56>
 45a:	80 ee       	ldi	r24, 0xE0	; 224
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	84 de       	rcall	.-760    	; 0x168 <write_led_matrix>
 460:	07 c0       	rjmp	.+14     	; 0x470 <scrollLeft+0x56>
 462:	82 ee       	ldi	r24, 0xE2	; 226
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	80 de       	rcall	.-768    	; 0x168 <write_led_matrix>
 468:	03 c0       	rjmp	.+6      	; 0x470 <scrollLeft+0x56>
 46a:	88 ee       	ldi	r24, 0xE8	; 232
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	7c de       	rcall	.-776    	; 0x168 <write_led_matrix>
 470:	86 01       	movw	r16, r12
 472:	c0 e0       	ldi	r28, 0x00	; 0
 474:	d0 e0       	ldi	r29, 0x00	; 0
 476:	ce 01       	movw	r24, r28
 478:	77 de       	rcall	.-786    	; 0x168 <write_led_matrix>
 47a:	80 91 5a 03 	lds	r24, 0x035A	; 0x80035a <updateCount>
 47e:	90 91 5b 03 	lds	r25, 0x035B	; 0x80035b <updateCount+0x1>
 482:	98 01       	movw	r18, r16
 484:	28 1b       	sub	r18, r24
 486:	39 0b       	sbc	r19, r25
 488:	80 91 58 03 	lds	r24, 0x0358	; 0x800358 <__data_end>
 48c:	90 91 59 03 	lds	r25, 0x0359	; 0x800359 <__data_end+0x1>
 490:	82 0f       	add	r24, r18
 492:	93 1f       	adc	r25, r19
 494:	01 96       	adiw	r24, 0x01	; 1
 496:	12 f4       	brpl	.+4      	; 0x49c <scrollLeft+0x82>
 498:	8a 2d       	mov	r24, r10
 49a:	9b 2d       	mov	r25, r11
 49c:	88 0f       	add	r24, r24
 49e:	99 1f       	adc	r25, r25
 4a0:	fc 01       	movw	r30, r24
 4a2:	e4 5a       	subi	r30, 0xA4	; 164
 4a4:	fc 4f       	sbci	r31, 0xFC	; 252
 4a6:	80 81       	ld	r24, Z
 4a8:	91 81       	ldd	r25, Z+1	; 0x01
 4aa:	5e de       	rcall	.-836    	; 0x168 <write_led_matrix>
 4ac:	0f 5f       	subi	r16, 0xFF	; 255
 4ae:	1f 4f       	sbci	r17, 0xFF	; 255
 4b0:	22 96       	adiw	r28, 0x02	; 2
 4b2:	c0 31       	cpi	r28, 0x10	; 16
 4b4:	d1 05       	cpc	r29, r1
 4b6:	f9 f6       	brne	.-66     	; 0x476 <scrollLeft+0x5c>
 4b8:	88 e0       	ldi	r24, 0x08	; 8
 4ba:	c8 0e       	add	r12, r24
 4bc:	d1 1c       	adc	r13, r1
 4be:	50 de       	rcall	.-864    	; 0x160 <stop_led_matrix>
 4c0:	8f ef       	ldi	r24, 0xFF	; 255
 4c2:	e8 1a       	sub	r14, r24
 4c4:	f8 0a       	sbc	r15, r24
 4c6:	88 e1       	ldi	r24, 0x18	; 24
 4c8:	c8 16       	cp	r12, r24
 4ca:	d1 04       	cpc	r13, r1
 4cc:	09 f0       	breq	.+2      	; 0x4d0 <scrollLeft+0xb6>
 4ce:	b9 cf       	rjmp	.-142    	; 0x442 <scrollLeft+0x28>
 4d0:	80 91 5a 03 	lds	r24, 0x035A	; 0x80035a <updateCount>
 4d4:	90 91 5b 03 	lds	r25, 0x035B	; 0x80035b <updateCount+0x1>
 4d8:	01 97       	sbiw	r24, 0x01	; 1
 4da:	90 93 5b 03 	sts	0x035B, r25	; 0x80035b <updateCount+0x1>
 4de:	80 93 5a 03 	sts	0x035A, r24	; 0x80035a <updateCount>
 4e2:	18 16       	cp	r1, r24
 4e4:	19 06       	cpc	r1, r25
 4e6:	4c f0       	brlt	.+18     	; 0x4fa <scrollLeft+0xe0>
 4e8:	80 91 58 03 	lds	r24, 0x0358	; 0x800358 <__data_end>
 4ec:	90 91 59 03 	lds	r25, 0x0359	; 0x800359 <__data_end+0x1>
 4f0:	47 96       	adiw	r24, 0x17	; 23
 4f2:	90 93 5b 03 	sts	0x035B, r25	; 0x80035b <updateCount+0x1>
 4f6:	80 93 5a 03 	sts	0x035A, r24	; 0x80035a <updateCount>
 4fa:	df 91       	pop	r29
 4fc:	cf 91       	pop	r28
 4fe:	1f 91       	pop	r17
 500:	0f 91       	pop	r16
 502:	ff 90       	pop	r15
 504:	ef 90       	pop	r14
 506:	df 90       	pop	r13
 508:	cf 90       	pop	r12
 50a:	bf 90       	pop	r11
 50c:	af 90       	pop	r10
 50e:	08 95       	ret

00000510 <setScrollingSpeed>:

void setScrollingSpeed(int s)
{
	scrollingSpeed = s;
 510:	90 93 3b 03 	sts	0x033B, r25	; 0x80033b <scrollingSpeed+0x1>
 514:	80 93 3a 03 	sts	0x033A, r24	; 0x80033a <scrollingSpeed>
 518:	08 95       	ret

0000051a <getScrollingSpeed>:
}

int getScrollingSpeed(void)
{
	return scrollingSpeed;
}
 51a:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <scrollingSpeed>
 51e:	90 91 3b 03 	lds	r25, 0x033B	; 0x80033b <scrollingSpeed+0x1>
 522:	08 95       	ret

00000524 <wait>:



void wait(int ms)
{
	for (int i = 0; i < ms; i++)
 524:	18 16       	cp	r1, r24
 526:	19 06       	cpc	r1, r25
 528:	6c f4       	brge	.+26     	; 0x544 <wait+0x20>
 52a:	20 e0       	ldi	r18, 0x00	; 0
 52c:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 52e:	ef ec       	ldi	r30, 0xCF	; 207
 530:	f7 e0       	ldi	r31, 0x07	; 7
 532:	31 97       	sbiw	r30, 0x01	; 1
 534:	f1 f7       	brne	.-4      	; 0x532 <wait+0xe>
 536:	00 c0       	rjmp	.+0      	; 0x538 <wait+0x14>
 538:	00 00       	nop
 53a:	2f 5f       	subi	r18, 0xFF	; 255
 53c:	3f 4f       	sbci	r19, 0xFF	; 255
 53e:	82 17       	cp	r24, r18
 540:	93 07       	cpc	r25, r19
 542:	a9 f7       	brne	.-22     	; 0x52e <wait+0xa>
 544:	08 95       	ret

00000546 <main>:

void wait(int ms);

int main( void )
{
	init_led_matrix();
 546:	1b de       	rcall	.-970    	; 0x17e <init_led_matrix>
	clear_led_matrix_display();
 548:	7a de       	rcall	.-780    	; 0x23e <clear_led_matrix_display>
 54a:	82 e4       	ldi	r24, 0x42	; 66
	
	selectLetters("FUCK DEZE KANKER SHIT");
 54c:	93 e0       	ldi	r25, 0x03	; 3
 54e:	c4 de       	rcall	.-632    	; 0x2d8 <selectLetters>
 550:	81 e0       	ldi	r24, 0x01	; 1
	setScrollingSpeed(SCROLLING_FAST);
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	dd df       	rcall	.-70     	; 0x510 <setScrollingSpeed>
	while (1)
	{
		scrollLeft();
		
		wait(getScrollingSpeed()*100);
 556:	c4 e6       	ldi	r28, 0x64	; 100
	
	selectLetters("FUCK DEZE KANKER SHIT");
	setScrollingSpeed(SCROLLING_FAST);
	while (1)
	{
		scrollLeft();
 558:	60 df       	rcall	.-320    	; 0x41a <scrollLeft>
 55a:	df df       	rcall	.-66     	; 0x51a <getScrollingSpeed>
		
		wait(getScrollingSpeed()*100);
 55c:	9c 01       	movw	r18, r24
 55e:	c2 9f       	mul	r28, r18
 560:	c0 01       	movw	r24, r0
 562:	c3 9f       	mul	r28, r19
 564:	90 0d       	add	r25, r0
 566:	11 24       	eor	r1, r1
 568:	dd df       	rcall	.-70     	; 0x524 <wait>
 56a:	f6 cf       	rjmp	.-20     	; 0x558 <main+0x12>

0000056c <_exit>:
 56c:	f8 94       	cli

0000056e <__stop_program>:
 56e:	ff cf       	rjmp	.-2      	; 0x56e <__stop_program>
