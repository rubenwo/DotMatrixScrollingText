
DotMatrixScrollingText.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000242  00800100  000003b2  00000446  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003b2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002c0  00800342  00800342  00000688  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000688  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  000006f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001011  00000000  00000000  000007c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ba0  00000000  00000000  000017d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007cd  00000000  00000000  00002375  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001bc  00000000  00000000  00002b44  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005c6  00000000  00000000  00002d00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003d1  00000000  00000000  000032c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00003697  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	13 e0       	ldi	r17, 0x03	; 3
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 eb       	ldi	r30, 0xB2	; 178
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 34       	cpi	r26, 0x42	; 66
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	26 e0       	ldi	r18, 0x06	; 6
  b4:	a2 e4       	ldi	r26, 0x42	; 66
  b6:	b3 e0       	ldi	r27, 0x03	; 3
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a2 30       	cpi	r26, 0x02	; 2
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	64 d1       	rcall	.+712    	; 0x38c <main>
  c4:	74 c1       	rjmp	.+744    	; 0x3ae <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <look_up_character>:
			0b11100000
		}
	}
};

character look_up_character(char c){
  c8:	ac 01       	movw	r20, r24
	for(int i = 0; i < DICTIONARY_SIZE; i++)
	{
		if(dictionary[i].letter == c)
  ca:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  ce:	68 17       	cp	r22, r24
  d0:	41 f0       	breq	.+16     	; 0xe2 <look_up_character+0x1a>
  d2:	e3 e1       	ldi	r30, 0x13	; 19
  d4:	f1 e0       	ldi	r31, 0x01	; 1
		}
	}
};

character look_up_character(char c){
	for(int i = 0; i < DICTIONARY_SIZE; i++)
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	30 e0       	ldi	r19, 0x00	; 0
	{
		if(dictionary[i].letter == c)
  da:	90 81       	ld	r25, Z
  dc:	96 13       	cpse	r25, r22
  de:	11 c0       	rjmp	.+34     	; 0x102 <look_up_character+0x3a>
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <look_up_character+0x1e>
		}
	}
};

character look_up_character(char c){
	for(int i = 0; i < DICTIONARY_SIZE; i++)
  e2:	20 e0       	ldi	r18, 0x00	; 0
  e4:	30 e0       	ldi	r19, 0x00	; 0
	{
		if(dictionary[i].letter == c)
		{
			return dictionary[i];
  e6:	83 e1       	ldi	r24, 0x13	; 19
  e8:	82 9f       	mul	r24, r18
  ea:	f0 01       	movw	r30, r0
  ec:	83 9f       	mul	r24, r19
  ee:	f0 0d       	add	r31, r0
  f0:	11 24       	eor	r1, r1
  f2:	e0 50       	subi	r30, 0x00	; 0
  f4:	ff 4f       	sbci	r31, 0xFF	; 255
  f6:	da 01       	movw	r26, r20
  f8:	01 90       	ld	r0, Z+
  fa:	0d 92       	st	X+, r0
  fc:	8a 95       	dec	r24
  fe:	e1 f7       	brne	.-8      	; 0xf8 <look_up_character+0x30>
 100:	0e c0       	rjmp	.+28     	; 0x11e <look_up_character+0x56>
		}
	}
};

character look_up_character(char c){
	for(int i = 0; i < DICTIONARY_SIZE; i++)
 102:	2f 5f       	subi	r18, 0xFF	; 255
 104:	3f 4f       	sbci	r19, 0xFF	; 255
 106:	73 96       	adiw	r30, 0x13	; 19
 108:	2d 31       	cpi	r18, 0x1D	; 29
 10a:	31 05       	cpc	r19, r1
 10c:	31 f7       	brne	.-52     	; 0xda <look_up_character+0x12>
		{
			return dictionary[i];
		}
	}
	
	return dictionary[0];
 10e:	83 e1       	ldi	r24, 0x13	; 19
 110:	e0 e0       	ldi	r30, 0x00	; 0
 112:	f1 e0       	ldi	r31, 0x01	; 1
 114:	da 01       	movw	r26, r20
 116:	01 90       	ld	r0, Z+
 118:	0d 92       	st	X+, r0
 11a:	8a 95       	dec	r24
 11c:	e1 f7       	brne	.-8      	; 0x116 <look_up_character+0x4e>
 11e:	ca 01       	movw	r24, r20
 120:	08 95       	ret

00000122 <start_led_matrix>:
outputs:	
notes:			
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x20 | 0x04);
 122:	84 ea       	ldi	r24, 0xA4	; 164
 124:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while (0x00 == (TWCR & 0x80))
 128:	e4 e7       	ldi	r30, 0x74	; 116
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	80 81       	ld	r24, Z
 12e:	88 23       	and	r24, r24
 130:	ec f7       	brge	.-6      	; 0x12c <start_led_matrix+0xa>
		;
}
 132:	08 95       	ret

00000134 <stop_led_matrix>:
outputs:	
notes:			
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 134:	84 e9       	ldi	r24, 0x94	; 148
 136:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 13a:	08 95       	ret

0000013c <write_led_matrix>:
outputs:	
notes:			
Version :    	DMK, Initial code
*******************************************************************/
{
	TWDR = data;
 13c:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
	TWCR = (0x80 | 0x04);
 140:	84 e8       	ldi	r24, 0x84	; 132
 142:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while (0 == (TWCR & 0x80))
 146:	e4 e7       	ldi	r30, 0x74	; 116
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	80 81       	ld	r24, Z
 14c:	88 23       	and	r24, r24
 14e:	ec f7       	brge	.-6      	; 0x14a <write_led_matrix+0xe>
		;
}
 150:	08 95       	ret

00000152 <init_led_matrix>:

void init_led_matrix(void)
{
 152:	1f 93       	push	r17
 154:	cf 93       	push	r28
 156:	df 93       	push	r29
	TWSR = 0;
 158:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
	TWBR = 32; // TWI clock set to 100kHz, prescaler = 0
 15c:	80 e2       	ldi	r24, 0x20	; 32
 15e:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>

	start_led_matrix();
 162:	df df       	rcall	.-66     	; 0x122 <start_led_matrix>
	write_led_matrix(DOT_MATRIX_BASE_ADDR); //Display I2C addres + R/W bit
 164:	80 ee       	ldi	r24, 0xE0	; 224
 166:	ea df       	rcall	.-44     	; 0x13c <write_led_matrix>
	write_led_matrix(0x21);					//Internal osc on (page 10 HT16K33)
 168:	81 e2       	ldi	r24, 0x21	; 33
 16a:	e8 df       	rcall	.-48     	; 0x13c <write_led_matrix>
 16c:	c4 e7       	ldi	r28, 0x74	; 116
outputs:	
notes:			
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 16e:	d0 e0       	ldi	r29, 0x00	; 0
 170:	14 e9       	ldi	r17, 0x94	; 148
 172:	18 83       	st	Y, r17
	start_led_matrix();
	write_led_matrix(DOT_MATRIX_BASE_ADDR); //Display I2C addres + R/W bit
	write_led_matrix(0x21);					//Internal osc on (page 10 HT16K33)
	stop_led_matrix();

	start_led_matrix();
 174:	d6 df       	rcall	.-84     	; 0x122 <start_led_matrix>
	write_led_matrix(DOT_MATRIX_BASE_ADDR); //Display I2C addres + R/W bit
 176:	80 ee       	ldi	r24, 0xE0	; 224
 178:	e1 df       	rcall	.-62     	; 0x13c <write_led_matrix>
	write_led_matrix(0xA0);					//HT16K33 pins all output
 17a:	80 ea       	ldi	r24, 0xA0	; 160
 17c:	df df       	rcall	.-66     	; 0x13c <write_led_matrix>
outputs:	
notes:			
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 17e:	18 83       	st	Y, r17
	start_led_matrix();
	write_led_matrix(DOT_MATRIX_BASE_ADDR); //Display I2C addres + R/W bit
	write_led_matrix(0xA0);					//HT16K33 pins all output
	stop_led_matrix();

	start_led_matrix();
 180:	d0 df       	rcall	.-96     	; 0x122 <start_led_matrix>
	write_led_matrix(DOT_MATRIX_BASE_ADDR); //Display I2C addres + R/W bit
 182:	80 ee       	ldi	r24, 0xE0	; 224
 184:	db df       	rcall	.-74     	; 0x13c <write_led_matrix>
	write_led_matrix(0xE7);					//Display Dimming 4/16 duty cycle
 186:	87 ee       	ldi	r24, 0xE7	; 231
 188:	d9 df       	rcall	.-78     	; 0x13c <write_led_matrix>
 18a:	18 83       	st	Y, r17
outputs:	
notes:			
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 18c:	ca df       	rcall	.-108    	; 0x122 <start_led_matrix>
	start_led_matrix();
	write_led_matrix(DOT_MATRIX_BASE_ADDR); //Display I2C addres + R/W bit
	write_led_matrix(0xE7);					//Display Dimming 4/16 duty cycle
	stop_led_matrix();

	start_led_matrix();
 18e:	80 ee       	ldi	r24, 0xE0	; 224
 190:	d5 df       	rcall	.-86     	; 0x13c <write_led_matrix>
	write_led_matrix(DOT_MATRIX_BASE_ADDR); //Display I2C addres + R/W bit
 192:	81 e8       	ldi	r24, 0x81	; 129
 194:	d3 df       	rcall	.-90     	; 0x13c <write_led_matrix>
 196:	18 83       	st	Y, r17
	write_led_matrix(0x81);					//Display OFF - Blink On
 198:	df 91       	pop	r29
 19a:	cf 91       	pop	r28
 19c:	1f 91       	pop	r17
outputs:	
notes:			
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 19e:	08 95       	ret

000001a0 <clear_led_matrix_display>:

	start_led_matrix();
	write_led_matrix(DOT_MATRIX_BASE_ADDR); //Display I2C addres + R/W bit
	write_led_matrix(0x81);					//Display OFF - Blink On
	stop_led_matrix();
}
 1a0:	0f 93       	push	r16
 1a2:	1f 93       	push	r17
 1a4:	cf 93       	push	r28
 1a6:	df 93       	push	r29

void clear_led_matrix_display(void)
{
 1a8:	c0 e0       	ldi	r28, 0x00	; 0
outputs:	
notes:			
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 1aa:	04 e7       	ldi	r16, 0x74	; 116
 1ac:	10 e0       	ldi	r17, 0x00	; 0
 1ae:	d4 e9       	ldi	r29, 0x94	; 148
void clear_led_matrix_display(void)
{

	for (int i = 0; i < 8; i++)
	{
		start_led_matrix();
 1b0:	b8 df       	rcall	.-144    	; 0x122 <start_led_matrix>
		write_led_matrix(DOT_MATRIX_BASE_ADDR);
 1b2:	80 ee       	ldi	r24, 0xE0	; 224
 1b4:	c3 df       	rcall	.-122    	; 0x13c <write_led_matrix>
		write_led_matrix(0x00 + (i * 2));
 1b6:	8c 2f       	mov	r24, r28
 1b8:	c1 df       	rcall	.-126    	; 0x13c <write_led_matrix>
		write_led_matrix(0x00);
 1ba:	80 e0       	ldi	r24, 0x00	; 0
 1bc:	bf df       	rcall	.-130    	; 0x13c <write_led_matrix>
 1be:	f8 01       	movw	r30, r16
outputs:	
notes:			
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 1c0:	d0 83       	st	Z, r29
 1c2:	ce 5f       	subi	r28, 0xFE	; 254
 1c4:	c0 31       	cpi	r28, 0x10	; 16
}

void clear_led_matrix_display(void)
{

	for (int i = 0; i < 8; i++)
 1c6:	a1 f7       	brne	.-24     	; 0x1b0 <clear_led_matrix_display+0x10>
 1c8:	df 91       	pop	r29
		write_led_matrix(DOT_MATRIX_BASE_ADDR);
		write_led_matrix(0x00 + (i * 2));
		write_led_matrix(0x00);
		stop_led_matrix();
	}
}
 1ca:	cf 91       	pop	r28
 1cc:	1f 91       	pop	r17
 1ce:	0f 91       	pop	r16
 1d0:	08 95       	ret

000001d2 <scroller_set_text>:
 1d2:	cf 92       	push	r12
	}
}

void scroller_set_speed(int speed)
{
	scrollingSpeed = speed;
 1d4:	df 92       	push	r13
 1d6:	ef 92       	push	r14
 1d8:	ff 92       	push	r15
 1da:	0f 93       	push	r16
 1dc:	1f 93       	push	r17
 1de:	cf 93       	push	r28
 1e0:	df 93       	push	r29
 1e2:	cd b7       	in	r28, 0x3d	; 61
 1e4:	de b7       	in	r29, 0x3e	; 62
 1e6:	63 97       	sbiw	r28, 0x13	; 19
 1e8:	0f b6       	in	r0, 0x3f	; 63
 1ea:	f8 94       	cli
 1ec:	de bf       	out	0x3e, r29	; 62
 1ee:	0f be       	out	0x3f, r0	; 63
 1f0:	cd bf       	out	0x3d, r28	; 61
 1f2:	6c 01       	movw	r12, r24
 1f4:	7c 01       	movw	r14, r24
 1f6:	00 e0       	ldi	r16, 0x00	; 0
 1f8:	10 e0       	ldi	r17, 0x00	; 0
 1fa:	45 c0       	rjmp	.+138    	; 0x286 <scroller_set_text+0xb4>
 1fc:	f7 01       	movw	r30, r14
 1fe:	80 81       	ld	r24, Z
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	cd d0       	rcall	.+410    	; 0x39e <toupper>
 204:	f7 01       	movw	r30, r14
 206:	81 93       	st	Z+, r24
 208:	7f 01       	movw	r14, r30
 20a:	68 2f       	mov	r22, r24
 20c:	ce 01       	movw	r24, r28
 20e:	01 96       	adiw	r24, 0x01	; 1
 210:	5b df       	rcall	.-330    	; 0xc8 <look_up_character>
 212:	4a 81       	ldd	r20, Y+2	; 0x02
 214:	5b 81       	ldd	r21, Y+3	; 0x03
 216:	14 16       	cp	r1, r20
 218:	15 06       	cpc	r1, r21
 21a:	1c f5       	brge	.+70     	; 0x262 <scroller_set_text+0x90>
 21c:	fe 01       	movw	r30, r28
 21e:	34 96       	adiw	r30, 0x04	; 4
 220:	60 91 42 03 	lds	r22, 0x0342	; 0x800342 <__data_end>
 224:	70 91 43 03 	lds	r23, 0x0343	; 0x800343 <__data_end+0x1>
 228:	db 01       	movw	r26, r22
 22a:	aa 0f       	add	r26, r26
 22c:	bb 1f       	adc	r27, r27
 22e:	aa 5b       	subi	r26, 0xBA	; 186
 230:	bc 4f       	sbci	r27, 0xFC	; 252
 232:	9a 01       	movw	r18, r20
 234:	22 0f       	add	r18, r18
 236:	33 1f       	adc	r19, r19
 238:	2d 5f       	subi	r18, 0xFD	; 253
 23a:	3f 4f       	sbci	r19, 0xFF	; 255
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	8c 0f       	add	r24, r28
 242:	9d 1f       	adc	r25, r29
 244:	28 0f       	add	r18, r24
 246:	39 1f       	adc	r19, r25
 248:	81 91       	ld	r24, Z+
 24a:	91 91       	ld	r25, Z+
 24c:	8d 93       	st	X+, r24
 24e:	9d 93       	st	X+, r25
 250:	e2 17       	cp	r30, r18
 252:	f3 07       	cpc	r31, r19
 254:	c9 f7       	brne	.-14     	; 0x248 <scroller_set_text+0x76>
 256:	46 0f       	add	r20, r22
 258:	57 1f       	adc	r21, r23
 25a:	50 93 43 03 	sts	0x0343, r21	; 0x800343 <__data_end+0x1>
 25e:	40 93 42 03 	sts	0x0342, r20	; 0x800342 <__data_end>
 262:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <__data_end>
 266:	90 91 43 03 	lds	r25, 0x0343	; 0x800343 <__data_end+0x1>
 26a:	fc 01       	movw	r30, r24
 26c:	ee 0f       	add	r30, r30
 26e:	ff 1f       	adc	r31, r31
 270:	ea 5b       	subi	r30, 0xBA	; 186
 272:	fc 4f       	sbci	r31, 0xFC	; 252
 274:	11 82       	std	Z+1, r1	; 0x01
 276:	10 82       	st	Z, r1
 278:	01 96       	adiw	r24, 0x01	; 1
 27a:	90 93 43 03 	sts	0x0343, r25	; 0x800343 <__data_end+0x1>
 27e:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <__data_end>
 282:	0f 5f       	subi	r16, 0xFF	; 255
 284:	1f 4f       	sbci	r17, 0xFF	; 255
 286:	f6 01       	movw	r30, r12
 288:	01 90       	ld	r0, Z+
 28a:	00 20       	and	r0, r0
 28c:	e9 f7       	brne	.-6      	; 0x288 <scroller_set_text+0xb6>
 28e:	31 97       	sbiw	r30, 0x01	; 1
 290:	ec 19       	sub	r30, r12
 292:	fd 09       	sbc	r31, r13
 294:	0e 17       	cp	r16, r30
 296:	1f 07       	cpc	r17, r31
 298:	08 f4       	brcc	.+2      	; 0x29c <scroller_set_text+0xca>
 29a:	b0 cf       	rjmp	.-160    	; 0x1fc <scroller_set_text+0x2a>
 29c:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <__data_end>
 2a0:	90 91 43 03 	lds	r25, 0x0343	; 0x800343 <__data_end+0x1>
 2a4:	47 96       	adiw	r24, 0x17	; 23
 2a6:	90 93 45 03 	sts	0x0345, r25	; 0x800345 <updateCount+0x1>
 2aa:	80 93 44 03 	sts	0x0344, r24	; 0x800344 <updateCount>
 2ae:	63 96       	adiw	r28, 0x13	; 19
 2b0:	0f b6       	in	r0, 0x3f	; 63
 2b2:	f8 94       	cli
 2b4:	de bf       	out	0x3e, r29	; 62
 2b6:	0f be       	out	0x3f, r0	; 63
 2b8:	cd bf       	out	0x3d, r28	; 61
 2ba:	df 91       	pop	r29
 2bc:	cf 91       	pop	r28
 2be:	1f 91       	pop	r17
 2c0:	0f 91       	pop	r16
 2c2:	ff 90       	pop	r15
 2c4:	ef 90       	pop	r14
 2c6:	df 90       	pop	r13
 2c8:	cf 90       	pop	r12
 2ca:	08 95       	ret

000002cc <scroller_scroll_left>:
 2cc:	ff 92       	push	r15
 2ce:	0f 93       	push	r16
 2d0:	1f 93       	push	r17
 2d2:	cf 93       	push	r28
 2d4:	df 93       	push	r29
 2d6:	25 df       	rcall	.-438    	; 0x122 <start_led_matrix>
 2d8:	80 ee       	ldi	r24, 0xE0	; 224
 2da:	30 df       	rcall	.-416    	; 0x13c <write_led_matrix>
 2dc:	10 e0       	ldi	r17, 0x00	; 0
 2de:	c0 e0       	ldi	r28, 0x00	; 0
 2e0:	d0 e0       	ldi	r29, 0x00	; 0
 2e2:	0f 2e       	mov	r0, r31
 2e4:	fd e5       	ldi	r31, 0x5D	; 93
 2e6:	ff 2e       	mov	r15, r31
 2e8:	f0 2d       	mov	r31, r0
 2ea:	01 e0       	ldi	r16, 0x01	; 1
 2ec:	81 2f       	mov	r24, r17
 2ee:	26 df       	rcall	.-436    	; 0x13c <write_led_matrix>
 2f0:	80 91 44 03 	lds	r24, 0x0344	; 0x800344 <updateCount>
 2f4:	90 91 45 03 	lds	r25, 0x0345	; 0x800345 <updateCount+0x1>
 2f8:	9e 01       	movw	r18, r28
 2fa:	28 1b       	sub	r18, r24
 2fc:	39 0b       	sbc	r19, r25
 2fe:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <__data_end>
 302:	90 91 43 03 	lds	r25, 0x0343	; 0x800343 <__data_end+0x1>
 306:	82 0f       	add	r24, r18
 308:	93 1f       	adc	r25, r19
 30a:	01 96       	adiw	r24, 0x01	; 1
 30c:	12 f4       	brpl	.+4      	; 0x312 <scroller_scroll_left+0x46>
 30e:	8f 2d       	mov	r24, r15
 310:	90 2f       	mov	r25, r16
 312:	88 0f       	add	r24, r24
 314:	99 1f       	adc	r25, r25
 316:	fc 01       	movw	r30, r24
 318:	ea 5b       	subi	r30, 0xBA	; 186
 31a:	fc 4f       	sbci	r31, 0xFC	; 252
 31c:	80 81       	ld	r24, Z
 31e:	0e df       	rcall	.-484    	; 0x13c <write_led_matrix>
 320:	21 96       	adiw	r28, 0x01	; 1
 322:	1e 5f       	subi	r17, 0xFE	; 254
 324:	10 31       	cpi	r17, 0x10	; 16
 326:	11 f7       	brne	.-60     	; 0x2ec <scroller_scroll_left+0x20>
 328:	05 df       	rcall	.-502    	; 0x134 <stop_led_matrix>
 32a:	80 91 44 03 	lds	r24, 0x0344	; 0x800344 <updateCount>
 32e:	90 91 45 03 	lds	r25, 0x0345	; 0x800345 <updateCount+0x1>
 332:	01 97       	sbiw	r24, 0x01	; 1
 334:	90 93 45 03 	sts	0x0345, r25	; 0x800345 <updateCount+0x1>
 338:	80 93 44 03 	sts	0x0344, r24	; 0x800344 <updateCount>
 33c:	18 16       	cp	r1, r24
 33e:	19 06       	cpc	r1, r25
 340:	4c f0       	brlt	.+18     	; 0x354 <scroller_scroll_left+0x88>
 342:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <__data_end>
 346:	90 91 43 03 	lds	r25, 0x0343	; 0x800343 <__data_end+0x1>
 34a:	47 96       	adiw	r24, 0x17	; 23
 34c:	90 93 45 03 	sts	0x0345, r25	; 0x800345 <updateCount+0x1>
 350:	80 93 44 03 	sts	0x0344, r24	; 0x800344 <updateCount>
 354:	df 91       	pop	r29
 356:	cf 91       	pop	r28
 358:	1f 91       	pop	r17
 35a:	0f 91       	pop	r16
 35c:	ff 90       	pop	r15
 35e:	08 95       	ret

00000360 <scroller_get_speed>:
}

int scroller_get_speed(void)
{
	return scrollingSpeed;
}
 360:	80 91 27 03 	lds	r24, 0x0327	; 0x800327 <scrollingSpeed>
 364:	90 91 28 03 	lds	r25, 0x0328	; 0x800328 <scrollingSpeed+0x1>
 368:	08 95       	ret

0000036a <wait>:
	return 1;
}

void wait(int ms)
{
	for (int i = 0; i < ms; i++)
 36a:	18 16       	cp	r1, r24
 36c:	19 06       	cpc	r1, r25
 36e:	6c f4       	brge	.+26     	; 0x38a <wait+0x20>
 370:	20 e0       	ldi	r18, 0x00	; 0
 372:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 374:	ef ec       	ldi	r30, 0xCF	; 207
 376:	f7 e0       	ldi	r31, 0x07	; 7
 378:	31 97       	sbiw	r30, 0x01	; 1
 37a:	f1 f7       	brne	.-4      	; 0x378 <wait+0xe>
 37c:	00 c0       	rjmp	.+0      	; 0x37e <wait+0x14>
 37e:	00 00       	nop
 380:	2f 5f       	subi	r18, 0xFF	; 255
 382:	3f 4f       	sbci	r19, 0xFF	; 255
 384:	82 17       	cp	r24, r18
 386:	93 07       	cpc	r25, r19
 388:	a9 f7       	brne	.-22     	; 0x374 <wait+0xa>
 38a:	08 95       	ret

0000038c <main>:
	// 	//EICRA |= 0b00000010;
	// 	EIMSK |= 0b00010001;
	//
	// 	sei();

	init_led_matrix();
 38c:	e2 de       	rcall	.-572    	; 0x152 <init_led_matrix>
	clear_led_matrix_display();
 38e:	08 df       	rcall	.-496    	; 0x1a0 <clear_led_matrix_display>
 390:	89 e2       	ldi	r24, 0x29	; 41

	scroller_set_text("Nerds are the new cool!");
 392:	93 e0       	ldi	r25, 0x03	; 3
 394:	1e df       	rcall	.-452    	; 0x1d2 <scroller_set_text>

	while (1)
	{
		scroller_scroll_left();
 396:	9a df       	rcall	.-204    	; 0x2cc <scroller_scroll_left>
 398:	e3 df       	rcall	.-58     	; 0x360 <scroller_get_speed>

		wait(scroller_get_speed());
 39a:	e7 df       	rcall	.-50     	; 0x36a <wait>
 39c:	fc cf       	rjmp	.-8      	; 0x396 <main+0xa>

0000039e <toupper>:
 39e:	91 11       	cpse	r25, r1
 3a0:	08 95       	ret
 3a2:	81 56       	subi	r24, 0x61	; 97
 3a4:	8a 51       	subi	r24, 0x1A	; 26
 3a6:	08 f4       	brcc	.+2      	; 0x3aa <toupper+0xc>
 3a8:	80 52       	subi	r24, 0x20	; 32
 3aa:	85 58       	subi	r24, 0x85	; 133
 3ac:	08 95       	ret

000003ae <_exit>:
 3ae:	f8 94       	cli

000003b0 <__stop_program>:
 3b0:	ff cf       	rjmp	.-2      	; 0x3b0 <__stop_program>
